_id: spc_2fdc6e305a1b46938790e4441abfcd47
type: ApiSpec
parentId: wrk_93e6d1afd74f4b8d8f568162ba9646f6
modified: 1633696397295
created: 1632860565680
fileName: NoloNoloPlus API 1.0.0
contents: >
  ---

  openapi: 3.0.0

  info:
    title: NoloNoloPlus API
    description: API for NoloNoloPlus
    contact:
      name: Matteo Vannucchi
      email: matteo.vannucchi@studio.unibo.it
    license:
      name: Apache 2.0
      url: http://www.apache.org/licenses/LICENSE-2.0.html
    version: 1.0.0
  servers:

  - url: https://site202120.tw.cs.unibo.it
    description: Server primario
  - url: https://localhost.com
    description: Server locale test
  tags:

  - name: customers
    description: Operations available for CRUD operation in the customers database
  - name: products
    description: Operations available for CRUD operation in the products database
  - name: employees
    description: Operations available for CRUD operation in the employee database
  - name: unit
    description: Operations available for CRUD operation in the unit database
  - name: rentals
    description: Operations available for CRUD operation in the products database
  paths:
    /customers:
      get:
        security:
          - authToken: []
        description: Get all customer in the database
        tags:
        - customers
        operationId: getAllCustomers
        parameters:
        - name: username
          in: query
          required: false
          schema: 
            type: string
          description: "Username of the customers to be returned"
        - name: email
          in: query
          required: false
          schema: 
            type: string
          description: "Email of the customers to be returned"
        responses:
          "200":
            description: the operation was completed successfully
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Customer'
          "401":
            description: the caller was not authorized to do the operation
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "500":
            description: server error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
      post:
        security:
          - authToken: []
        description: Create a customers in the database, with a randomly generated id
        tags:
        - customers
        operationId: addCustomer
        requestBody:
          description: the customer to be added to the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        responses:
          "201":
            description: customer created successfully
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Customer"
          "400":
            description: invalid input, object invalid
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "401":
            description: the caller was not authorized to do the operation
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "409":
            description: an existing item already exists
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
    /customers/{id}:
      get:
        security:
          - authToken: []
        description: get a customer by id
        tags:
        - customers
        operationId: getCustomerById
        parameters:
        - name: id
          in: path
          description: The id of the customers to get
          required: true
          schema:
            $ref: "#/components/schemas/Id"
        responses:
          "200":
            description: The operation was completed successfully
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Customer"
          "400":
            description: Invalid id
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "401":
            description: the caller was not authorized to do the operation
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "404":
            description: No customer with that id exist
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
      delete:
        security:
          - authToken: []
        description: Delete a customer with the id passed
        tags:
        - customers
        operationId: removeCustomerById
        parameters:
        - name: id
          in: path
          description: The id of the customers to delete
          required: true
          schema:
            $ref: "#/components/schemas/Id"
        responses:
          "200":
            description: customer deleted correctly
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Customer"
          "400":
            description: Invalid id
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "401":
            description: the caller was not authorized to do the operation
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "404":
            description: No customer with that id exist
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
      patch:
        security:
          - authToken: []
        description: Modify a customer on the database
        tags:
        - customers
        operationId: modifyCustomer
        parameters:
        - name: id
          in: path
          description: The id of the customers to modify
          required: true
          schema:
            $ref: "#/components/schemas/Id"
        requestBody:
          description: The new field of the customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        responses:
          "200":
            description: customer modified successfully
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Customer"
          "400":
            description: invalid input, object invalid
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "401":
            description: the caller was not authorized to do the operation
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "404":
            description: A customer with that id doesn't exit.
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error" 
    /customers/{id}/rentals:
      get:
        security:
          - authToken: []
        description: get all rentals associated with the customer
        operationId: getAllCustomerRentals
        tags:
        - customers
        parameters:
        - name: id
          in: path
          description: The id of the customers
          required: true
          schema:
            $ref: "#/components/schemas/Id"
        responses:
          "201":
            description: The operation was completed successfully
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Rental'
          "400":
            description: Invalid id
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "401":
            description: the caller was not authorized to do the operation
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "404":
            description: No customer with that id exist
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
    /customers/{id}/favorites:
      get:
        security:
          - authToken: []
        description: get all favorites associated with the customer
        operationId: getAllFavorites
        tags:
        - customers
        parameters:
        - name: id
          in: path
          description: The id of the customers
          required: true
          schema:
            $ref: "#/components/schemas/Id"
        - name: max
          in: query
          description: The max number of favorites to return.
          required: false
          example: 3
          schema:
            type: integer
        responses:
          "201":
            description: The operation was completed successfully
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Product'
          "400":
            description: Invalid id
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "401":
            description: the caller was not authorized to do the operation
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "404":
            description: No customer with that id exist
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
    /employees:
      get:
        description: Get all employees in the database
        tags:
        - employees
        operationId: getAllEmployees
        responses:
          "200":
            description: the operation was completed successfully
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Employee'
          "500":
            description: server error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
      post:
        description: Create a employee in the database, with a randomly generated id
        tags:
        - employees
        operationId: addEmployee
        requestBody:
          description: the employee to be added to the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        responses:
          "201":
            description: employee created successfully
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Employee"
          "400":
            description: invalid input, object invalid
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "409":
            description: an existing item already exists
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
    /employees/{id}:
      get:
        description: get a employee by id
        tags:
        - employees
        operationId: getEmployeeById
        parameters:
        - name: id
          in: path
          description: The id of the employee to get
          required: true
          schema:
            $ref: "#/components/schemas/Id"
        responses:
          "201":
            description: The operation was completed successfully
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Employee"
          "400":
            description: Invalid id
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "404":
            description: No employee with that id exist
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
      delete:
        description: Delete a employee with the id passed
        tags:
        - employees
        operationId: removeEmployeeById
        parameters:
        - name: id
          in: path
          description: The id of the employee to delete
          required: true
          schema:
            $ref: "#/components/schemas/Id"
        responses:
          "200":
            description: employee deleted correctly
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Employee"
          "400":
            description: Invalid id
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "404":
            description: No employee with that id exist
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
      patch:
        description: Modify a employee on the database
        tags:
        - employees
        operationId: modifyEmployee
        parameters:
        - name: id
          in: path
          description: The id of the employee to modify
          required: true
          schema:
            $ref: "#/components/schemas/Id"
          example: 5
        requestBody:
          description: The new field of the employee
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        responses:
          "200":
            description: staff modified successfully
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Employee"
          "400":
            description: invalid input, object invalid
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "404":
            description: A employee with that id doesn't exit.
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error" 
    /employees/{id}/rentals:
      get:
        description: get all rental associated with the employee
        operationId: getAllEmployeeRentals
        tags:
        - employees
        parameters:
        - name: id
          in: path
          description: The id of the employee
          required: true
          schema:
            $ref: "#/components/schemas/Id"
        responses:
          "201":
            description: The operation was completed successfully
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Rental'
          "400":
            description: Invalid id
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "404":
            description: No employee with that id exist
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"  
    /products:
      get:
        tags:
        - products
        description: Get all products
        operationId: getAllProducts
        responses:
          "200":
            description: the operation was completed successfully
            content:
              multipart/form-data:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Product'
          "500":
            description: server error
            content:
              multipart/form-data:
                schema:
                  $ref: '#/components/schemas/Error'
      post:
        tags:
        - products
        description: Create a product on the database with a randomly generated id
        operationId: createProduct
        requestBody:
          description: the product to be created on the database
          content:
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/Product'
        responses:
          "201":
            description: the operation was successfull
            content:
              multipart/form-data:
                schema:
                  $ref: '#/components/schemas/Product'
          "400":
            description: the object structure has some error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          "409":
            description: an existing item already exists
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
    /products/{id}:
      get:
        tags:
        - products
        summary: return a single product denoted by an id
        operationId: getProductById
        parameters:
        - name: id
          in: path
          description: the id of the product to return
          required: true
          schema:
            $ref: "#/components/schemas/Id"
        responses:
          "200":
            description: the operation was completed successfully
            content:
              multipart/form-data:
                schema:
                  $ref: '#/components/schemas/Product'
          "400":
            description: invalid id
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          "404":
            description: No product with that id exist
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
      delete: 
        description: Delete a product with the id passed
        tags: 
        - products
        operationId: removeProductsById
        parameters:
        - name: id
          in: path
          description: The id of the product to delete
          required: true
          schema:
            $ref: "#/components/schemas/Id"
        responses: 
          "200":
            description: product deleted correctly
            content:
              multipart/form-data:
                schema:
                  $ref: "#/components/schemas/Product"
          "400":
            description: Invalid id
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "404":
            description: No customer with that id exist
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
      patch:
        description: Modify a product on the database
        tags:
        - products
        operationId: modifyProduct
        parameters:
        - name: id
          in: path
          description: The id of the product to modify
          required: true
          schema:
            $ref: "#/components/schemas/Id"
        requestBody:
          description: The new field of the product
          content:
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/Product'
        responses:
          "200":
            description: product modified successfully
            content:
              multipart/form-data:
                schema:
                  $ref: "#/components/schemas/Product"
          "400":
            description: invalid input, object invalid
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "404":
            description: A product with that id does not exit.
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
    /products/{id}/units:
      get:
        description: Get all unit associated with the product
        operationId: getAllUnitsOfProduct
        tags:
        - products
        parameters:
        - name: id
          in: path
          description: The id of the product
          required: true
          schema:
            $ref: "#/components/schemas/Id"
        responses:
          "200":
            description: The operation was completed successfully
            content:
              multipart/form-data:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Unit'
          "400":
            description: Invalid id
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "404":
            description: No product with that id exist
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
      post:
        description: Create a unit assocciated with the product in the database, with a randomly generated id
        tags:
        - products
        operationId: addUnitToProduct
        parameters: 
        - name: id
          in: path
          description: The id of the product 
          required: true
          schema:
            $ref: "#/components/schemas/Id"
        requestBody:
          description: the tag to be added to the product
          content:
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/Unit'
        responses:
          "201":
            description: Unit created successfully
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Unit"
          "400":
            description: invalid input, object invalid
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "409":
            description: an existing item already exists
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
    /products/{id}/tags:
      get:
        description: Get all tags of the products
        tags:
        - products
        parameters:
        - name: id
          in: path
          description: The id of the product
          required: true
          schema:
            $ref: "#/components/schemas/Id"
        responses:
          "201":
            description: The operation was completed successfully
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Tag'
          "400":
            description: Invalid id
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "404":
            description: No product with that id exist
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
      post:
        description: Create a tags assocciated with the product in the database, with a randomly generated id
        tags:
        - products
        operationId: addTagToProduct
        parameters: 
        - name: id
          in: path
          description: The id of the product 
          required: true
          schema:
            $ref: "#/components/schemas/Id"
        requestBody:
          description: the tag to be added to the product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        responses:
          "201":
            description: tag added successfully
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Tag"
          "400":
            description: invalid input, object invalid
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "409":
            description: an existing item already exists
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
    /products/{id}/altproducts:
      get:
        description: Get all alternative products associated with the product
        operationId: getAllAltProductOfProduct
        tags:
        - products
        parameters:
        - name: id
          in: path
          description: The id of the product
          required: true
          schema:
            $ref: "#/components/schemas/Id"
        responses:
          "201":
            description: The operation was completed successfully
            content:
              multipart/form-data:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Product'
          "400":
            description: Invalid id
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "404":
            description: No product with that id exist
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
      post:
        description: Add an alternate product assocciated with the product in the database, with a randomly generated id
        tags:
        - products
        operationId: addAltProdToProduct
        parameters: 
        - name: id
          in: path
          description: The id of the product 
          required: true
          schema:
            $ref: "#/components/schemas/Id"
        requestBody:
          description: the alternate product to be added to the product
          content:
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/Product'
        responses:
          "201":
            description: Alternate product added successfully
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Product"
          "400":
            description: invalid input, object invalid
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "409":
            description: an existing item already exists
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
    /rentals: 
      get:
        description: Get all rentals in the database
        tags:
        - rentals
        operationId: getAllRentals
        responses:
          "200":
            description: the operation was completed successfully
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Rental'
          "500":
            description: server error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
      post:
        description: Create a rental in the database, with a randomly generated id
        tags:
        - rentals
        operationId: addRental
        requestBody:
          description: the rental to be added to the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rental'
        responses:
          "201":
            description: rental created successfully
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Rental"
          "400":
            description: invalid input, object invalid
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "409":
            description: an existing item already exists
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
    /rentals/{id}:
      get:
        description: get a rental by id
        tags:
        - rentals
        operationId: getRentalById
        parameters:
        - name: id
          in: path
          description: The id of the rental to get
          required: true
          schema:
            $ref: "#/components/schemas/Id"
        responses:
          "201":
            description: The operation was completed successfully
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Rental"
          "400":
            description: Invalid id
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "404":
            description: No rental with that id exist
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
      delete:
        description: Delete a rental with the id passed
        tags:
        - rentals
        operationId: removeRentalById
        parameters:
        - name: id
          in: path
          description: The id of the rental to delete
          required: true
          style: simple
          explode: false
          schema:
            $ref: "#/components/schemas/Id"
          example: 5
        responses:
          "200":
            description: rental deleted correctly
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Rental"
          "400":
            description: Invalid id
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "404":
            description: No rental with that id exist
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
      patch:
        description: Modify a rental on the database
        tags:
        - rentals
        operationId: modifyRental
        parameters:
        - name: id
          in: path
          description: The id of the customers to modify
          required: true
          schema:
            $ref: "#/components/schemas/Id"
        requestBody:
          description: The new field of the rental
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rental'
        responses:
          "200":
            description: rental modified successfully
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Rental"
          "400":
            description: invalid input, object invalid
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "404":
            description: A rental with that id does not exit.
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
    /authentication/customers/login:
      post:
        description: Login a customer in the database. The customer must already exist.
        tags:
        - authentication
        operationId: loginCustomer
        requestBody:
          description: the login info of the customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginInfo'
        responses:
          "200":
            description: Authentication successfull
          "400":
            description: invalid input, object invalid
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "401":
            description: the customer must register before login
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "403":
            description: the credential are wrong
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
    /authentication/employees/login:
      post:
        description: Login a employee in the database. The employee must already exist.
        tags:
        - authentication
        operationId: loginEmployee
        requestBody:
          description: the login info of the employee
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginInfo'
        responses:
          "200":
            description: Authentication successfull
          "400":
            description: invalid input, object invalid
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "401":
            description: the employee must register itself before login
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "403":
            description: the credential are wrong
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"  


      
  components:
    schemas:
      Customer:
        description: Schema for the customer type. Contain the fundamental info of the customer such as fist and last name, date of birth, username and encrypted password
        required:
        - loginInfo
        type: object
        properties:
          _id:
            $ref: '#/components/schemas/Id'
          firstName:
            type: string
            example: Mario
          lastName:
            type: string
            example: Rossi
          loginInfo:
            $ref: "#/components/schemas/LoginInfo"
          dateOfBirth:
            type: string
            format: date
          address:
            $ref: '#/components/schemas/Address'
      Employee:
        type: object
        required:
          - firstname
          - lastname
          - loginInfo
          - authorizazion
        properties:
          _id:
            $ref: '#/components/schemas/Id'
          firstname:
            type: string
            example: "Mario"
          lastname:
            type: string
            example: "Bianchi"
          loginInfo:
            $ref: "#/components/schemas/LoginInfo"
          authorizazion:
            type: string
            enum: ["Manager", "Employee"]
      Address:
        type: object
        required:
          - country
          - city
          - zipcode
          - streetaddress
        properties:
          country:
            type: string
            example: "Italy"
          city:
            type: string
            example: "Bologna"
          zipcode:
            type: string
            example: "40124"
          streetaddress:
            type: string
            example: "Via san felice 50/A"
      Product:
        type: object
        description: Schema for the product type. Contain info about the product
        required:
        - name
        - description
        - image
        - category
        - subcategory
        - tags
        - altproducts
        properties:
          _id:
            $ref: '#/components/schemas/Id'
          name:
            type: string
            example: "Macchina da corsa"
          description:
            type: string
            example: "Ferrari del 1950"
          image:
            type: string
            format: path
            example: "media/productImage.jpg"
          category:
            type: string
            example: "Macchine"
          subcategory:
            type: string
            example: "Super car"
          tags:
            type: array
            items:
              $ref: "#/components/schemas/Tag"
          altproducts:
            type: array
            items:
              $ref: "#/components/schemas/Id"
      Unit:
        type: object
        required:
          - name
          - price
          - condition
          - available
          - product
          - rentals
        properties:
          _id:
            $ref: '#/components/schemas/Id'
          name:
            type: string
            example: "Ferrari 505 del 2019"
          condition:
            type: string
            enum: ["Perfect", "minor flaw", "major flaw", "broken"]
          available:
            type: boolean
            example: True
          product:
            $ref: "#/components/schemas/Id"
          rentals:
            type: array
            items:
              $ref: "#/components/schemas/Id"
      Rental:
        type: object
        required:
          - startdate
          - enddate
          - bill
          - customer
          - staff
          - unit
        properties:
          _id:
            $ref: "#/components/schemas/Id"
          startdate:
            type: string
            format: date
            example: "2021-07-13"
          enddate:
            type: string
            format: date
            example: "2017-08-02"
          bill:
            $ref: "#/components/schemas/Bill"
          customer:
            $ref: "#/components/schemas/Id"
          staff:
            $ref: "#/components/schemas/Id"
          unit:
            $ref: "#/components/schemas/Id"
          date:
            type: string
      Bill:
        type: object
        required:
          - baseprice
          - modifiers
          - date
        properties:
          _id:
            $ref: "#/components/schemas/Id"
          baseprice:
            type: number
            example: 125.4
          modifiers:
            type: array
            items:
              $ref: "#/components/schemas/Modifier"
          date:
            type: string
            format: data
            example: "2021-07-13"
      RentalKit:
        type: object
        required:
          - products
          - price
        properties:
          _id:
            $ref: "#/components/schemas/Id"
          products:
            type: array
            items:
              $ref: "#/components/schemas/Id"
          price:
            type: number
            example: 1231
      Tag:
        required:
          - key
          - value
        properties:
          key:
            type: string
            example: "Marca"
          value:
            type: string
            example: "Rolex"
      Modifier:
        required:
          - value
          - condition
        properties:
          value:
            type: number
            example: 0.90
          condition:
            type: string
            example: "If rental is on the weekend"
      Id:
        type: integer
        example: 24
        description: "Id of object on the database"
      Error:
        required:
        - message
        type: object
        properties:
          message:
            type: string
            example: Could not find server
        description: Schema for the error type. Contain info about the error
      LoginInfo:
        description: Schema for the login info of a customer/employee/manager.
        required:
        - username
        - password
        - email
        type: object
        properties:
          username:
            type: string
            example: mariorossi00
          password:
            type: string
            example: secretpassword
          email:
            type: string
            example: "mario.rossi@gmail.com"
    securitySchemes:
      authToken:            # arbitrary name for the security scheme
        type: http
        scheme: bearer
        bearerFormat: JWT 
contentType: yaml
