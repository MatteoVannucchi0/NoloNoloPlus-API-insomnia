_id: spc_2fdc6e305a1b46938790e4441abfcd47
type: ApiSpec
parentId: wrk_93e6d1afd74f4b8d8f568162ba9646f6
modified: 1632860987787
created: 1632860565680
fileName: NoloNoloPlus API 1.0.0
contents: >
  ---

  openapi: 3.0.0

  info:
    title: NoloNoloPlus API
    description: API for NoloNoloPlus
    contact:
      name: Matteo Vannucchi
      email: matteo.vannucchi@studio.unibo.it
    license:
      name: Apache 2.0
      url: http://www.apache.org/licenses/LICENSE-2.0.html
    version: 1.0.0
  servers:

  - url: https://site202120.tw.cs.unibo.it
    description: Server primario
  - url: https://localhost.com
    description: Server locale test
  tags:

  - name: customers
    description: Operations available for CRUD operation in the customers database
  - name: products
    description: Operations available for CRUD operation in the products database
  paths:
    /customers:
      get:
        tags:
        - customers
        summary: return all the customers in the database
        operationId: getAllCustomers
        responses:
          "200":
            description: the operation was completed successfully
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Customer'
          "500":
            description: server error
      post:
        tags:
        - customers
        summary: adds a customers to the database, with a randomly generated id
        operationId: addCustomer
        requestBody:
          description: the customer to be added to the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        responses:
          "201":
            description: customer added to the database correctly
          "400":
            description: invalid input, object invalid
          "409":
            description: an existing item already exists
    /customers/{id}:
      get:
        tags:
        - customers
        summary: get a customer by id
        operationId: getCustomerById
        parameters:
        - name: id
          in: path
          description: The id of the customers to get
          required: true
          style: simple
          explode: false
          schema:
            type: integer
          example: 5
        responses:
          "201":
            description: the operation was completed successfully
          "400":
            description: invalid id
          "409":
            description: no customer with that id exist
      delete:
        tags:
        - customers
        summary: remove a customer by id
        operationId: removeCustomerById
        parameters:
        - name: id
          in: path
          description: The id of the customers to delete
          required: true
          style: simple
          explode: false
          schema:
            type: integer
          example: 5
        responses:
          "200":
            description: customer removed  correctly
          "400":
            description: invalid id
          "409":
            description: no customer with that id exist
    /products:
      get:
        tags:
        - products
        summary: the api for the products
        operationId: getAllProducts
        responses:
          "200":
            description: the operation was completed successfully
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Product'
          "500":
            description: server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
      post:
        tags:
        - products
        summary: create an element on the database
        operationId: createProduct
        requestBody:
          description: the product to be created on the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        responses:
          "201":
            description: the operation was successfull
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Product'
          "400":
            description: the object structure has some error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
    /products/{id}:
      get:
        tags:
        - products
        summary: return a single product denoted by an id
        operationId: getProductById
        parameters:
        - name: id
          in: path
          description: the id of the product to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
          example: 52
        responses:
          "200":
            description: the operation was completed successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Product'
          "400":
            description: invalid id
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          "409":
            description: no product with that id exist in the database
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
  components:
    schemas:
      Customer:
        required:
        - dateOfBirth
        - email
        - firstName
        - lastName
        - password
        - username
        type: object
        properties:
          firstName:
            type: string
            example: Mario
          lastName:
            type: string
            example: Rossi
          username:
            type: string
            example: MarioRossi00
          password:
            type: string
            format: password
            example: f2e2376760300880bc8c00040091a6c43eb4ba6188c36d3931752a55ca2d0cfc
          email:
            type: string
            format: "email"
            example: mario.rossi@gmail.com
          dateOfBirth:
            type: string
            format: date
        description: Schema for the customer type. Contain the fundamental info of the customer such as fist and last name, date of birth, username and encrypted password
      Product:
        required:
        - description
        - title
        type: object
        properties:
          title:
            type: string
            example: Macchina da corsa
          description:
            type: string
            example: Macchina da corsa ferrari del 1950
        description: Schema for the product type. Contain info about the product
      Error:
        required:
        - message
        type: object
        properties:
          message:
            type: string
            example: Could not find server
        description: Schema for the error type. Contain info about the error
contentType: yaml
