_id: spc_2fdc6e305a1b46938790e4441abfcd47
type: ApiSpec
parentId: wrk_93e6d1afd74f4b8d8f568162ba9646f6
modified: 1640104744695
created: 1632860565680
fileName: NoloNoloPlus API 1.0.0
contents: >
  ---

  openapi: 3.0.0

  info:
    title: NoloNoloPlus API
    description: API for NoloNoloPlus
    contact:
      name: Matteo Vannucchi
      email: matteo.vannucchi@studio.unibo.it
    license:
      name: Apache 2.0
      url: http://www.apache.org/licenses/LICENSE-2.0.html
    version: 1.0.0
  servers:

  - url: https://site202120.tw.cs.unibo.it/api
    description: Server primario
  - url: https://localhost.com
    description: Server locale test
  tags:

  - name: customers
    description: Operations available for CRUD operation in the customers database
  - name: products
    description: Operations available for CRUD operation in the products database
  - name: employees
    description: Operations available for CRUD operation in the employee database
  - name: unit
    description: Operations available for CRUD operation in the unit database
  - name: rentals
    description: Operations available for CRUD operation in the products database
  paths: 
    /customers:
      get:
        security:
          - authToken: []
        description: Get all customer in the database
        tags:
        - customers
        operationId: getAllCustomers
        parameters:
        - name: username
          in: query
          required: false
          schema: 
            type: string
          description: "Username of the customers to be returned"
        - name: email
          in: query
          required: false
          schema: 
            type: string
          description: "Email of the customers to be returned"
        responses:
          "200":
            description: the operation was completed successfully
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Customer'
          "401":
            description: the caller was not authorized to do the operation
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "500":
            description: server error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
    /products:
      get:
        tags:
        - products
        description: Get all products
        operationId: getAllProducts
        parameters:
        - name: name
          in: query
          description: "The name of the product to return"
          required: false
          schema:
            type: string
          example: "Ferrari 518"
        - name: category
          in: query
          description: "The category of the product to return"
          required: false
          schema:
            type: string
          example: "Supercar"
        - name: subcategory
          in: query
          description: "The subcategory of the product to return"
          required: false
          schema:
            type: string
          example: "Supercar"
        - name: availableTo
          in: query
          description: "If present return only product available to a certain date, if availableFrom is not set it use the current date for the from date"
          required: false
          schema:
            type: string
            format: date
        - name: availableFrom
          in: query
          description: "If availableTo is present return only products available in that period, else it is ignored"
          required: false
          schema:
            type: string
            format: date
        - name: available
          in: query
          description: "If present and if true it return only product available now"
          required: false
          schema:
            type: string
            format: date
        - name: populate
          in: query
          description: "If present and if true it populate the field of the products"
          required: false
          schema:
            type: boolean
        responses:
          "200":
            description: the operation was completed successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PaginatorProduct'
          "500":
            description: server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
      post:
        tags:
        - products
        description: Create a product on the database with a randomly generated id
        operationId: createProduct
        requestBody:
          description: the product to be created on the database
          content:
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/Product'
        responses:
          "201":
            description: the operation was successfull
            content:
              multipart/form-data:
                schema:
                  $ref: '#/components/schemas/Product'
          "400":
            description: the object structure has some error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          "409":
            description: an existing item already exists
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
    /products/{id}:
      get:
        tags:
        - products
        summary: return a single product denoted by an id
        operationId: getProductById
        parameters:
        - name: id
          in: path
          description: the id of the product to return
          required: true
          schema:
            $ref: "#/components/schemas/Id"
        responses:
          "200":
            description: the operation was completed successfully
            content:
              multipart/form-data:
                schema:
                  $ref: '#/components/schemas/Product'
          "400":
            description: invalid id
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          "404":
            description: No product with that id exist
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
      delete: 
        description: Delete a product with the id passed
        tags: 
        - products
        operationId: removeProductsById
        parameters:
        - name: id
          in: path
          description: The id of the product to delete
          required: true
          schema:
            $ref: "#/components/schemas/Id"
        responses: 
          "200":
            description: product deleted correctly
            content:
              multipart/form-data:
                schema:
                  $ref: "#/components/schemas/Product"
          "400":
            description: Invalid id
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "404":
            description: No customer with that id exist
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
      patch:
        description: Modify a product on the database
        tags:
        - products
        operationId: modifyProduct
        parameters:
        - name: id
          in: path
          description: The id of the product to modify
          required: true
          schema:
            $ref: "#/components/schemas/Id"
        requestBody:
          description: The new field of the product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        responses:
          "200":
            description: product modified successfully
            content:
              multipart/form-data:
                schema:
                  $ref: "#/components/schemas/Product"
          "400":
            description: invalid input, object invalid
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "404":
            description: A product with that id does not exit.
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
    /products/{id}/units:
      get:
        description: Get all unit associated with the product
        operationId: getAllUnitsOfProduct
        tags:
        - products
        parameters:
        - name: id
          in: path
          description: The id of the product
          required: true
          schema:
            $ref: "#/components/schemas/Id"
        responses:
          "200":
            description: The operation was completed successfully
            content:
              multipart/form-data:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Unit'
          "400":
            description: Invalid id
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "404":
            description: No product with that id exist
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
      post:
        description: Create a unit assocciated with the product in the database, with a randomly generated id
        tags:
        - products
        operationId: addUnitToProduct
        parameters: 
        - name: id
          in: path
          description: The id of the product 
          required: true
          schema:
            $ref: "#/components/schemas/Id"
        requestBody:
          description: the tag to be added to the product
          content:
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/Unit'
        responses:
          "201":
            description: Unit created successfully
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Unit"
          "400":
            description: invalid input, object invalid
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "404":
            description: No product with that id exist
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "409":
            description: an existing item already exists
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
    /products/{id}/tags:
      get:
        description: Get all tags of the products
        tags:
        - products
        parameters:
        - name: id
          in: path
          description: The id of the product
          required: true
          schema:
            $ref: "#/components/schemas/Id"
        responses:
          "201":
            description: The operation was completed successfully
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Tag'
          "400":
            description: Invalid id
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "404":
            description: No product with that id exist
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
      post:
        description: Create a tags assocciated with the product in the database, with a randomly generated id
        tags:
        - products
        operationId: addTagToProduct
        parameters: 
        - name: id
          in: path
          description: The id of the product 
          required: true
          schema:
            $ref: "#/components/schemas/Id"
        requestBody:
          description: the tag to be added to the product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        responses:
          "201":
            description: tag added successfully
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Tag"
          "400":
            description: invalid input, object invalid
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "409":
            description: an existing item already exists
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
    /products/{id}/altproducts:
      get:
        description: Get all alternative products associated with the product
        operationId: getAllAltProductOfProduct
        tags:
        - products
        parameters:
        - name: id
          in: path
          description: The id of the product
          required: true
          schema:
            $ref: "#/components/schemas/Id"
        responses:
          "200":
            description: The operation was completed successfully
            content:
              multipart/form-data:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Product'
          "400":
            description: Invalid id
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "404":
            description: No product with that id exist
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "500":
            description: Server error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
      post:
        description: Add an alternate product assocciated with the product in the database, with a randomly generated id
        tags:
        - products
        operationId: addAltProdToProduct
        parameters: 
        - name: id
          in: path
          description: "The id of the product" 
          required: true
          schema:
            type: object
            required:
              - _id
            properties:
              _id:
                $ref: '#/components/schemas/Id'
        requestBody:
          description: the id of the alternate product to be added to the product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Id'
        responses:
          "201":
            description: Alternate product added successfully
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Product"
          "400":
            description: invalid input, object invalid
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "404":
            description: No product found with that id
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
  components:
    schemas:
      PaginatorGeneric:
        description: "Base schemas for a paginator object"
        required:
        - totalDocs
        - limit
        - totalPages
        - page
        - paginCounter
        - hasPrevPage
        - hasNextPage
        - prevPage
        - nextPage
        properties:
          totalDocs:
            type: number
            example: 51
          limit:
            type: number
            example: 15
          totalPages:
            type: number
            example: 4
          page:
            type: number
            example: 1
          paginCounter:
            type: number
            example: 1
          hasPrevPage:
            type: boolean
            example: false
          hasNextPage:
            type: boolean
            example: true
          prevPage:
            type: number
            nullable: true
            example: null
          nextPage:
            type: number
            nullable: true
            example: 2
      Customer:
        description: "Schemas for a customer object"
        required:
        - _id
        - firstname
        - lastname
        - dateOfBirth
        - loginInfo
        - address
        - profilePicture
        - description
        properties:
          _id:
            $ref: '#/components/schemas/Id'
          firstname:
            type: string
            example: 'John'
          lastname:
            type: string
            example: 'Smith'
          dateOfBirth:
            type: string
            format: date
            example: "2021-07-13"
          loginInfo:
            $ref: "#/components/schemas/LoginInfo"
          address:
            $ref: "#/components/schemas/Address"
          profilePicture:
            type: string
            format: path
            example: "image/profile/placeholder.jpg"
          description:
            type: string
            example: "Il cliente è molto arrabbiato"
      Employee:
        type: object
        required:
          - _id
          - firstname
          - lastname
          - loginInfo
          - authorizazion
          - profilePicture
        properties:
          _id:
            $ref: '#/components/schemas/Id'
          firstname:
            type: string
            example: "Mario"
          lastname:
            type: string
            example: "Bianchi"
          loginInfo:
            $ref: "#/components/schemas/LoginInfo"
          authorizazion:
            type: string
            enum: ["Admin", "Employee"]
          profilePicture:
            type: string
            example: "image/profile/placeholder.png"
      Rental:
        type: object
        required:
          - _id
          - customer
          - employee
          - prenotationDate
          - state
          - bill
          - startDate
          - expectedEndDate
          - actualEndDate
          - unit
          - priceEstimation
        properties:
          _id:
            $ref: "#/components/schemas/Id"
          customer:
            $ref: "#/components/schemas/Id"
          employee:
            $ref: "#/components/schemas/Id"
          bill:
            $ref: "#/components/schemas/Id"
          unit:
            $ref: "#/components/schemas/Id"
          priceEstimation:
            $ref: "#/components/schemas/PriceEstimation"
          prenotationDate:
            type: string
            format: date
            example: "2021-07-13"
          expectedEndDate:
            type: string
            format: date
            example: "2021-07-20"
          actualEndDate:
            type: string
            format: date
            example: "2021-07-21"
          state:
            type: string
            enum: ["open", "pending", "close"]
      Product:
        type: object
        required:
          - _id
          - name
          - description
          - image
          - category
          - subcategory
          - tags
          - altproducts
        properties:
          _id:
            $ref: '#/components/schemas/Id'
          name:
            type: string
            example: "Ferrari 518"
          description:
            type: string
            example: "La ferrari più veloce di sempre"
          image:
            type: string
            example: "image/profile/placeholder.png"
          category:
            type: string
            example: "Auto lusso"
          subcategory:
            type: string
            example: "Super car"
          tags:
            type: array
            items:
              $ref: "#/components/schemas/Tag"
          altproducts:
            type: array
            items:
              $ref: "#/components/schemas/Id"
      Unit:
        type: object
        required:
          - _id
          - name
          - condition
          - price
          - product
          - rentals
        properties:
          _id:
            $ref: '#/components/schemas/Id'
          name:
            type: string
            example: "Ferrari 518"
          condition:
            type: string
            enum: ["perfect", "minor flaw", "major flaw", "broken"]
          price:
            type: number
            example: 800
          product:
            $ref: "#/components/schemas/Id"    
      PaginatorCustomer:
        allOf:
         - $ref: '#/components/schemas/PaginatorGeneric'
         - type: object
           required:
             - docs
           properties:
             docs:
              type: array
              items:
                $ref: "#/components/schemas/Customer"
      PaginatorEmployee:
        allOf:
         - $ref: '#/components/schemas/PaginatorGeneric'
         - type: object
           required:
             - docs
           properties:
             docs:
              type: array
              items:
                $ref: "#/components/schemas/Employee"
      PaginatorRental:
        allOf:
         - $ref: '#/components/schemas/PaginatorGeneric'
         - type: object
           required:
             - docs
           properties:
             docs:
              type: array
              items:
                $ref: "#/components/schemas/Rental"
      PaginatorProduct:
        allOf:
         - $ref: '#/components/schemas/PaginatorGeneric'
         - type: object
           required:
             - docs
           properties:
             docs:
              type: array
              items:
                $ref: "#/components/schemas/Product"
      Address:
        type: object
        required:
          - country
          - city
          - zipcode
          - streetaddress
        properties:
          country:
            type: string
            example: "Italy"
          city:
            type: string
            example: "Bologna"
          zipcode:
            type: string
            example: "40124"
          streetaddress:
            type: string
            example: "Via san felice 50/A"
      PriceEstimation:
        type: object
      Tag:
        required:
          - key
          - value
        properties:
          key:
            type: string
            example: "Marca"
          value:
            type: string
            example: "Rolex"
      LoginInfo:
        description: Schema for the login info of a customer/employee/manager.
        required:
        - username
        - password
        - email
        type: object
        properties:
          username:
            type: string
            example: "mariorossi00"
          password:
            type: string
            example: "secretpassword"
          email:
            type: string
            example: "mario.rossi@gmail.com"
      Id:
        type: string
        example: "61b0dd5c6cca343092e369c0"
        description: "Id of object on the database"
      Error:
        required:
        - message
        type: object
        properties:
          message:
            type: string
            example: Could not find server
        description: Schema for the error type. Contain info about the error
    securitySchemes:
      authToken:
        type: http
        scheme: bearer
        bearerFormat: JWT 
contentType: yaml
